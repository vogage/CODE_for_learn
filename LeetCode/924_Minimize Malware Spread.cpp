//
//  924_Minimize Malware Spread.cpp
//  leetcode
//
//  Created by 钱德厚 on 2023/8/28.
//

#include <stdio.h>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;



class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<int> res(n,0);
        vector<vector<pair<int,bool>>> NodeGraph(n,vector<pair<int,bool>>());
        
        for(int i=0;i<initial.size();i++){
            queue<int> que;
            que.push(initial[i]);
            unordered_set<int> visited;
            while(!que.empty()){
                int temp=que.front();
                que.pop();
                
                for(int j=0;j<n;j++){
                    if(visited.find(j)==visited.end()&&graph[temp][j]){//iterator from the node connected to malwared
                        visited.insert(j);
                        que.push(j);
                        //j is the next index to be malwared
                        if(NodeGraph[j].size()==0){ //not be allocated to some root index
                            NodeGraph[j].push_back(pair<int,bool>(initial[i],false)); // first: root index ,second: is already be decreased to the root index
                            res[initial[i]]++;
                        }else{
                            for(int k=0;k<NodeGraph[j].size();k++){
                                if(!NodeGraph[j][k].second){
                                    res[NodeGraph[j][k].first]--;
                                    NodeGraph[j][k].second=true;
                                }
                            }
                        }
                    }
                }
            }
        }
        pair<int,int> ans(0,initial[0]);
        for(int i=0;i<initial.size();i++){
            if(ans.first<res[initial[i]]){
                ans.first=res[initial[i]];
                ans.second=initial[i];
            }else if(ans.first==res[initial[i]]){
                ans.second=min(ans.second,initial[i]);
            }
        }
        return ans.second;
    }
};


int main(){
    Solution mysolu;
    vector<vector<int>> graph = {{1,1,1},{1,1,1},{1,1,1}};
    vector<int> initial = {1,2};
    vector<vector<int>> graph1={{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
    vector<int> initial1={3,1};
    int res=mysolu.minMalwareSpread(graph1, initial1);
    return 0;
}
